{"version":3,"file":"aws-sig.umd.js","sources":["../src/crypto-es/core.js","../src/crypto-es/hmac.js","../src/crypto-es/sha256.js","../src/encode.js","../node_modules/strict-uri-encode/index.js","../src/request/query.js","../src/request/headers.js","../src/request/path.js","../src/request/request.js","../src/index.js","../src/stringtosign.js","../src/signature.js"],"sourcesContent":["/**\n * CryptoJS core components.\n */\n/*\n\t* Local polyfil of Object.create\n\t*/\nvar create = Object.create || (function () {\n\tfunction F() {};\n\n\treturn function (obj) {\n\t\tvar subtype;\n\n\t\tF.prototype = obj;\n\n\t\tsubtype = new F();\n\n\t\tF.prototype = null;\n\n\t\treturn subtype;\n\t};\n}())\n\n/**\n * CryptoJS namespace.\n */\nvar C = {};\n\n/**\n * Library namespace.\n */\nvar C_lib = C.lib = {};\n\n/**\n * Base object for prototypal inheritance.\n */\nvar Base = C_lib.Base = (function () {\n\n\n\treturn {\n\t\t/**\n\t\t * Creates a new object that inherits from this object.\n\t\t *\n\t\t * @param {Object} overrides Properties to copy into the new object.\n\t\t *\n\t\t * @return {Object} The new object.\n\t\t *\n\t\t * @static\n\t\t *\n\t\t * @example\n\t\t *\n\t\t *     var MyType = CryptoJS.lib.Base.extend({\n\t\t *         field: 'value',\n\t\t *\n\t\t *         method: function () {\n\t\t *         }\n\t\t *     });\n\t\t */\n\t\textend: function (overrides) {\n\t\t\t// Spawn\n\t\t\tvar subtype = create(this);\n\n\t\t\t// Augment\n\t\t\tif (overrides) {\n\t\t\t\tsubtype.mixIn(overrides);\n\t\t\t}\n\n\t\t\t// Create default initializer\n\t\t\tif (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t\t\t\tsubtype.init = function () {\n\t\t\t\t\tsubtype.$super.init.apply(this, arguments);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Initializer's prototype is the subtype object\n\t\t\tsubtype.init.prototype = subtype;\n\n\t\t\t// Reference supertype\n\t\t\tsubtype.$super = this;\n\n\t\t\treturn subtype;\n\t\t},\n\n\t\t/**\n\t\t * Extends this object and runs the init method.\n\t\t * Arguments to create() will be passed to init().\n\t\t *\n\t\t * @return {Object} The new object.\n\t\t *\n\t\t * @static\n\t\t *\n\t\t * @example\n\t\t *\n\t\t *     var instance = MyType.create();\n\t\t */\n\t\tcreate: function () {\n\t\t\tvar instance = this.extend();\n\t\t\tinstance.init.apply(instance, arguments);\n\n\t\t\treturn instance;\n\t\t},\n\n\t\t/**\n\t\t * Initializes a newly created object.\n\t\t * Override this method to add some logic when your objects are created.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t *     var MyType = CryptoJS.lib.Base.extend({\n\t\t *         init: function () {\n\t\t *             // ...\n\t\t *         }\n\t\t *     });\n\t\t */\n\t\tinit: function () {\n\t\t},\n\n\t\t/**\n\t\t * Copies properties into this object.\n\t\t *\n\t\t * @param {Object} properties The properties to mix in.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t *     MyType.mixIn({\n\t\t *         field: 'value'\n\t\t *     });\n\t\t */\n\t\tmixIn: function (properties) {\n\t\t\tfor (var propertyName in properties) {\n\t\t\t\tif (properties.hasOwnProperty(propertyName)) {\n\t\t\t\t\tthis[propertyName] = properties[propertyName];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// IE won't copy toString using the loop above\n\t\t\tif (properties.hasOwnProperty('toString')) {\n\t\t\t\tthis.toString = properties.toString;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Creates a copy of this object.\n\t\t *\n\t\t * @return {Object} The clone.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t *     var clone = instance.clone();\n\t\t */\n\t\tclone: function () {\n\t\t\treturn this.init.prototype.extend(this);\n\t\t}\n\t};\n}());\n\n/**\n * An array of 32-bit words.\n *\n * @property {Array} words The array of 32-bit words.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\nvar WordArray = C_lib.WordArray = Base.extend({\n\t/**\n\t * Initializes a newly created word array.\n\t *\n\t * @param {Array} words (Optional) An array of 32-bit words.\n\t * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t *\n\t * @example\n\t *\n\t *     var wordArray = CryptoJS.lib.WordArray.create();\n\t *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t */\n\tinit: function (words, sigBytes) {\n\t\twords = this.words = words || [];\n\n\t\tif (sigBytes != undefined) {\n\t\t\tthis.sigBytes = sigBytes;\n\t\t} else {\n\t\t\tthis.sigBytes = words.length * 4;\n\t\t}\n\t},\n\n\t/**\n\t * Converts this word array to a string.\n\t *\n\t * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t *\n\t * @return {string} The stringified word array.\n\t *\n\t * @example\n\t *\n\t *     var string = wordArray + '';\n\t *     var string = wordArray.toString();\n\t *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t */\n\ttoString: function (encoder) {\n\t\treturn (encoder || Hex).stringify(this);\n\t},\n\n\t/**\n\t * Concatenates a word array to this word array.\n\t *\n\t * @param {WordArray} wordArray The word array to append.\n\t *\n\t * @return {WordArray} This word array.\n\t *\n\t * @example\n\t *\n\t *     wordArray1.concat(wordArray2);\n\t */\n\tconcat: function (wordArray) {\n\t\t// Shortcuts\n\t\tvar thisWords = this.words;\n\t\tvar thatWords = wordArray.words;\n\t\tvar thisSigBytes = this.sigBytes;\n\t\tvar thatSigBytes = wordArray.sigBytes;\n\n\t\t// Clamp excess bits\n\t\tthis.clamp();\n\n\t\t// Concat\n\t\tif (thisSigBytes % 4) {\n\t\t\t// Copy one byte at a time\n\t\t\tfor (var i = 0; i < thatSigBytes; i++) {\n\t\t\t\tvar thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t\t\t\tthisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t\t\t}\n\t\t} else {\n\t\t\t// Copy one word at a time\n\t\t\tfor (var i = 0; i < thatSigBytes; i += 4) {\n\t\t\t\tthisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t\t\t}\n\t\t}\n\t\tthis.sigBytes += thatSigBytes;\n\n\t\t// Chainable\n\t\treturn this;\n\t},\n\n\t/**\n\t * Removes insignificant bits.\n\t *\n\t * @example\n\t *\n\t *     wordArray.clamp();\n\t */\n\tclamp: function () {\n\t\t// Shortcuts\n\t\tvar words = this.words;\n\t\tvar sigBytes = this.sigBytes;\n\n\t\t// Clamp\n\t\twords[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t\twords.length = Math.ceil(sigBytes / 4);\n\t},\n\n\t/**\n\t * Creates a copy of this word array.\n\t *\n\t * @return {WordArray} The clone.\n\t *\n\t * @example\n\t *\n\t *     var clone = wordArray.clone();\n\t */\n\tclone: function () {\n\t\tvar clone = Base.clone.call(this);\n\t\tclone.words = this.words.slice(0);\n\n\t\treturn clone;\n\t},\n\n\t/**\n\t * Creates a word array filled with random bytes.\n\t *\n\t * @param {number} nBytes The number of random bytes to generate.\n\t *\n\t * @return {WordArray} The random word array.\n\t *\n\t * @static\n\t *\n\t * @example\n\t *\n\t *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t */\n\trandom: function (nBytes) {\n\t\tvar words = [];\n\n\t\tvar r = (function (m_w) {\n\t\t\tvar m_w = m_w;\n\t\t\tvar m_z = 0x3ade68b1;\n\t\t\tvar mask = 0xffffffff;\n\n\t\t\treturn function () {\n\t\t\t\tm_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t\t\t\tm_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t\t\t\tvar result = ((m_z << 0x10) + m_w) & mask;\n\t\t\t\tresult /= 0x100000000;\n\t\t\t\tresult += 0.5;\n\t\t\t\treturn result * (Math.random() > .5 ? 1 : -1);\n\t\t\t}\n\t\t});\n\n\t\tfor (var i = 0, rcache; i < nBytes; i += 4) {\n\t\t\tvar _r = r((rcache || Math.random()) * 0x100000000);\n\n\t\t\trcache = _r() * 0x3ade67b7;\n\t\t\twords.push((_r() * 0x100000000) | 0);\n\t\t}\n\n\t\treturn new WordArray.init(words, nBytes);\n\t}\n});\n\n/**\n * Encoder namespace.\n */\nvar C_enc = C.enc = {};\n\n/**\n * Hex encoding strategy.\n */\nvar Hex = C_enc.Hex = {\n\t/**\n\t * Converts a word array to a hex string.\n\t *\n\t * @param {WordArray} wordArray The word array.\n\t *\n\t * @return {string} The hex string.\n\t *\n\t * @static\n\t *\n\t * @example\n\t *\n\t *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t */\n\tstringify: function (wordArray) {\n\t\t// Shortcuts\n\t\tvar words = wordArray.words;\n\t\tvar sigBytes = wordArray.sigBytes;\n\n\t\t// Convert\n\t\tvar hexChars = [];\n\t\tfor (var i = 0; i < sigBytes; i++) {\n\t\t\tvar bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t\t\thexChars.push((bite >>> 4).toString(16));\n\t\t\thexChars.push((bite & 0x0f).toString(16));\n\t\t}\n\n\t\treturn hexChars.join('');\n\t},\n\n\t/**\n\t * Converts a hex string to a word array.\n\t *\n\t * @param {string} hexStr The hex string.\n\t *\n\t * @return {WordArray} The word array.\n\t *\n\t * @static\n\t *\n\t * @example\n\t *\n\t *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t */\n\tparse: function (hexStr) {\n\t\t// Shortcut\n\t\tvar hexStrLength = hexStr.length;\n\n\t\t// Convert\n\t\tvar words = [];\n\t\tfor (var i = 0; i < hexStrLength; i += 2) {\n\t\t\twords[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t\t}\n\n\t\treturn new WordArray.init(words, hexStrLength / 2);\n\t}\n};\n\n/**\n * Latin1 encoding strategy.\n */\nvar Latin1 = C_enc.Latin1 = {\n\t/**\n\t * Converts a word array to a Latin1 string.\n\t *\n\t * @param {WordArray} wordArray The word array.\n\t *\n\t * @return {string} The Latin1 string.\n\t *\n\t * @static\n\t *\n\t * @example\n\t *\n\t *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t */\n\tstringify: function (wordArray) {\n\t\t// Shortcuts\n\t\tvar words = wordArray.words;\n\t\tvar sigBytes = wordArray.sigBytes;\n\n\t\t// Convert\n\t\tvar latin1Chars = [];\n\t\tfor (var i = 0; i < sigBytes; i++) {\n\t\t\tvar bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t\t\tlatin1Chars.push(String.fromCharCode(bite));\n\t\t}\n\n\t\treturn latin1Chars.join('');\n\t},\n\n\t/**\n\t * Converts a Latin1 string to a word array.\n\t *\n\t * @param {string} latin1Str The Latin1 string.\n\t *\n\t * @return {WordArray} The word array.\n\t *\n\t * @static\n\t *\n\t * @example\n\t *\n\t *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t */\n\tparse: function (latin1Str) {\n\t\t// Shortcut\n\t\tvar latin1StrLength = latin1Str.length;\n\n\t\t// Convert\n\t\tvar words = [];\n\t\tfor (var i = 0; i < latin1StrLength; i++) {\n\t\t\twords[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t\t}\n\n\t\treturn new WordArray.init(words, latin1StrLength);\n\t}\n};\n\n/**\n * UTF-8 encoding strategy.\n */\nvar Utf8 = C_enc.Utf8 = {\n\t/**\n\t * Converts a word array to a UTF-8 string.\n\t *\n\t * @param {WordArray} wordArray The word array.\n\t *\n\t * @return {string} The UTF-8 string.\n\t *\n\t * @static\n\t *\n\t * @example\n\t *\n\t *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t */\n\tstringify: function (wordArray) {\n\t\ttry {\n\t\t\treturn decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t\t} catch (e) {\n\t\t\tthrow new Error('Malformed UTF-8 data');\n\t\t}\n\t},\n\n\t/**\n\t * Converts a UTF-8 string to a word array.\n\t *\n\t * @param {string} utf8Str The UTF-8 string.\n\t *\n\t * @return {WordArray} The word array.\n\t *\n\t * @static\n\t *\n\t * @example\n\t *\n\t *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t */\n\tparse: function (utf8Str) {\n\t\treturn Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t}\n};\n\n/**\n * Abstract buffered block algorithm template.\n *\n * The property blockSize must be implemented in a concrete subtype.\n *\n * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n */\nvar BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t/**\n\t * Resets this block algorithm's data buffer to its initial state.\n\t *\n\t * @example\n\t *\n\t *     bufferedBlockAlgorithm.reset();\n\t */\n\treset: function () {\n\t\t// Initial values\n\t\tthis._data = new WordArray.init();\n\t\tthis._nDataBytes = 0;\n\t},\n\n\t/**\n\t * Adds new data to this block algorithm's buffer.\n\t *\n\t * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t *\n\t * @example\n\t *\n\t *     bufferedBlockAlgorithm._append('data');\n\t *     bufferedBlockAlgorithm._append(wordArray);\n\t */\n\t_append: function (data) {\n\t\t// Convert string to WordArray, else assume WordArray already\n\t\tif (typeof data == 'string') {\n\t\t\tdata = Utf8.parse(data);\n\t\t}\n\n\t\t// Append\n\t\tthis._data.concat(data);\n\t\tthis._nDataBytes += data.sigBytes;\n\t},\n\n\t/**\n\t * Processes available data blocks.\n\t *\n\t * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t *\n\t * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t *\n\t * @return {WordArray} The processed data.\n\t *\n\t * @example\n\t *\n\t *     var processedData = bufferedBlockAlgorithm._process();\n\t *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t */\n\t_process: function (doFlush) {\n\t\t// Shortcuts\n\t\tvar data = this._data;\n\t\tvar dataWords = data.words;\n\t\tvar dataSigBytes = data.sigBytes;\n\t\tvar blockSize = this.blockSize;\n\t\tvar blockSizeBytes = blockSize * 4;\n\n\t\t// Count blocks ready\n\t\tvar nBlocksReady = dataSigBytes / blockSizeBytes;\n\t\tif (doFlush) {\n\t\t\t// Round up to include partial blocks\n\t\t\tnBlocksReady = Math.ceil(nBlocksReady);\n\t\t} else {\n\t\t\t// Round down to include only full blocks,\n\t\t\t// less the number of blocks that must remain in the buffer\n\t\t\tnBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t\t}\n\n\t\t// Count words ready\n\t\tvar nWordsReady = nBlocksReady * blockSize;\n\n\t\t// Count bytes ready\n\t\tvar nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t\t// Process blocks\n\t\tif (nWordsReady) {\n\t\t\tfor (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t\t\t\t// Perform concrete-algorithm logic\n\t\t\t\tthis._doProcessBlock(dataWords, offset);\n\t\t\t}\n\n\t\t\t// Remove processed words\n\t\t\tvar processedWords = dataWords.splice(0, nWordsReady);\n\t\t\tdata.sigBytes -= nBytesReady;\n\t\t}\n\n\t\t// Return processed words\n\t\treturn new WordArray.init(processedWords, nBytesReady);\n\t},\n\n\t/**\n\t * Creates a copy of this object.\n\t *\n\t * @return {Object} The clone.\n\t *\n\t * @example\n\t *\n\t *     var clone = bufferedBlockAlgorithm.clone();\n\t */\n\tclone: function () {\n\t\tvar clone = Base.clone.call(this);\n\t\tclone._data = this._data.clone();\n\n\t\treturn clone;\n\t},\n\n\t_minBufferSize: 0\n});\n\n/**\n * Abstract hasher template.\n *\n * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n */\nvar Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t/**\n\t * Configuration options.\n\t */\n\tcfg: Base.extend(),\n\n\t/**\n\t * Initializes a newly created hasher.\n\t *\n\t * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t *\n\t * @example\n\t *\n\t *     var hasher = CryptoJS.algo.SHA256.create();\n\t */\n\tinit: function (cfg) {\n\t\t// Apply config defaults\n\t\tthis.cfg = this.cfg.extend(cfg);\n\n\t\t// Set initial values\n\t\tthis.reset();\n\t},\n\n\t/**\n\t * Resets this hasher to its initial state.\n\t *\n\t * @example\n\t *\n\t *     hasher.reset();\n\t */\n\treset: function () {\n\t\t// Reset data buffer\n\t\tBufferedBlockAlgorithm.reset.call(this);\n\n\t\t// Perform concrete-hasher logic\n\t\tthis._doReset();\n\t},\n\n\t/**\n\t * Updates this hasher with a message.\n\t *\n\t * @param {WordArray|string} messageUpdate The message to append.\n\t *\n\t * @return {Hasher} This hasher.\n\t *\n\t * @example\n\t *\n\t *     hasher.update('message');\n\t *     hasher.update(wordArray);\n\t */\n\tupdate: function (messageUpdate) {\n\t\t// Append\n\t\tthis._append(messageUpdate);\n\n\t\t// Update the hash\n\t\tthis._process();\n\n\t\t// Chainable\n\t\treturn this;\n\t},\n\n\t/**\n\t * Finalizes the hash computation.\n\t * Note that the finalize operation is effectively a destructive, read-once operation.\n\t *\n\t * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t *\n\t * @return {WordArray} The hash.\n\t *\n\t * @example\n\t *\n\t *     var hash = hasher.finalize();\n\t *     var hash = hasher.finalize('message');\n\t *     var hash = hasher.finalize(wordArray);\n\t */\n\tfinalize: function (messageUpdate) {\n\t\t// Final message update\n\t\tif (messageUpdate) {\n\t\t\tthis._append(messageUpdate);\n\t\t}\n\n\t\t// Perform concrete-hasher logic\n\t\tvar hash = this._doFinalize();\n\n\t\treturn hash;\n\t},\n\n\tblockSize: 512/32,\n\n\t/**\n\t * Creates a shortcut function to a hasher's object interface.\n\t *\n\t * @param {Hasher} hasher The hasher to create a helper for.\n\t *\n\t * @return {Function} The shortcut function.\n\t *\n\t * @static\n\t *\n\t * @example\n\t *\n\t *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t */\n\t_createHelper: function (hasher) {\n\t\treturn function (message, cfg) {\n\t\t\treturn new hasher.init(cfg).finalize(message);\n\t\t};\n\t},\n\n\t/**\n\t * Creates a shortcut function to the HMAC's object interface.\n\t *\n\t * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t *\n\t * @return {Function} The shortcut function.\n\t *\n\t * @static\n\t *\n\t * @example\n\t *\n\t *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t */\n\t_createHmacHelper: function (hasher) {\n\t\treturn function (message, key) {\n\t\t\treturn new C_algo.HMAC.init(hasher, key).finalize(message);\n\t\t};\n\t}\n});\n\n/**\n * Algorithm namespace.\n */\nvar C_algo = C.algo = {};\n\nexport default C;\n","import Crypto from \"./core.js\";\n\n// Shortcuts\nvar C = Crypto;\nvar C_lib = C.lib;\nvar Base = C_lib.Base;\nvar C_enc = C.enc;\nvar Utf8 = C_enc.Utf8;\nvar C_algo = C.algo;\n\n/**\n * HMAC algorithm.\n */\nvar HMAC = C_algo.HMAC = Base.extend({\n\t/**\n\t * Initializes a newly created HMAC.\n\t *\n\t * @param {Hasher} hasher The hash algorithm to use.\n\t * @param {WordArray|string} key The secret key.\n\t *\n\t * @example\n\t *\n\t *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t */\n\tinit: function (hasher, key) {\n\t\t// Init hasher\n\t\thasher = this._hasher = new hasher.init();\n\n\t\t// Convert string to WordArray, else assume WordArray already\n\t\tif (typeof key == 'string') {\n\t\t\tkey = Utf8.parse(key);\n\t\t}\n\n\t\t// Shortcuts\n\t\tvar hasherBlockSize = hasher.blockSize;\n\t\tvar hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t\t// Allow arbitrary length keys\n\t\tif (key.sigBytes > hasherBlockSizeBytes) {\n\t\t\tkey = hasher.finalize(key);\n\t\t}\n\n\t\t// Clamp excess bits\n\t\tkey.clamp();\n\n\t\t// Clone key for inner and outer pads\n\t\tvar oKey = this._oKey = key.clone();\n\t\tvar iKey = this._iKey = key.clone();\n\n\t\t// Shortcuts\n\t\tvar oKeyWords = oKey.words;\n\t\tvar iKeyWords = iKey.words;\n\n\t\t// XOR keys with pad constants\n\t\tfor (var i = 0; i < hasherBlockSize; i++) {\n\t\t\toKeyWords[i] ^= 0x5c5c5c5c;\n\t\t\tiKeyWords[i] ^= 0x36363636;\n\t\t}\n\t\toKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t\t// Set initial values\n\t\tthis.reset();\n\t},\n\n\t/**\n\t * Resets this HMAC to its initial state.\n\t *\n\t * @example\n\t *\n\t *     hmacHasher.reset();\n\t */\n\treset: function () {\n\t\t// Shortcut\n\t\tvar hasher = this._hasher;\n\n\t\t// Reset\n\t\thasher.reset();\n\t\thasher.update(this._iKey);\n\t},\n\n\t/**\n\t * Updates this HMAC with a message.\n\t *\n\t * @param {WordArray|string} messageUpdate The message to append.\n\t *\n\t * @return {HMAC} This HMAC instance.\n\t *\n\t * @example\n\t *\n\t *     hmacHasher.update('message');\n\t *     hmacHasher.update(wordArray);\n\t */\n\tupdate: function (messageUpdate) {\n\t\tthis._hasher.update(messageUpdate);\n\n\t\t// Chainable\n\t\treturn this;\n\t},\n\n\t/**\n\t * Finalizes the HMAC computation.\n\t * Note that the finalize operation is effectively a destructive, read-once operation.\n\t *\n\t * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t *\n\t * @return {WordArray} The HMAC.\n\t *\n\t * @example\n\t *\n\t *     var hmac = hmacHasher.finalize();\n\t *     var hmac = hmacHasher.finalize('message');\n\t *     var hmac = hmacHasher.finalize(wordArray);\n\t */\n\tfinalize: function (messageUpdate) {\n\t\t// Shortcut\n\t\tvar hasher = this._hasher;\n\n\t\t// Compute HMAC\n\t\tvar innerHash = hasher.finalize(messageUpdate);\n\t\thasher.reset();\n\t\tvar hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t\treturn hmac;\n\t}\n});\n","import Crypto from \"./core.js\";\nimport \"./hmac.js\";\n\n// Shortcuts\nvar C = Crypto;\nvar C_lib = C.lib;\nvar WordArray = C_lib.WordArray;\nvar Hasher = C_lib.Hasher;\nvar C_algo = C.algo;\n\n// Initialization and round constants tables\nvar H = [];\nvar K = [];\n\n// Compute constants\n(function () {\n\tfunction isPrime(n) {\n\t\tvar sqrtN = Math.sqrt(n);\n\t\tfor (var factor = 2; factor <= sqrtN; factor++) {\n\t\t\tif (!(n % factor)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction getFractionalBits(n) {\n\t\treturn ((n - (n | 0)) * 0x100000000) | 0;\n\t}\n\n\tvar n = 2;\n\tvar nPrime = 0;\n\twhile (nPrime < 64) {\n\t\tif (isPrime(n)) {\n\t\t\tif (nPrime < 8) {\n\t\t\t\tH[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t\t\t}\n\t\t\tK[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t\t\tnPrime++;\n\t\t}\n\n\t\tn++;\n\t}\n}());\n\n// Reusable object\nvar W = [];\n\n/**\n * SHA-256 hash algorithm.\n */\nvar SHA256Hasher = C_algo.SHA256 = Hasher.extend({\n\t_doReset: function () {\n\t\tthis._hash = new WordArray.init(H.slice(0));\n\t},\n\n\t_doProcessBlock: function (M, offset) {\n\t\t// Shortcut\n\t\tvar H = this._hash.words;\n\n\t\t// Working variables\n\t\tvar a = H[0];\n\t\tvar b = H[1];\n\t\tvar c = H[2];\n\t\tvar d = H[3];\n\t\tvar e = H[4];\n\t\tvar f = H[5];\n\t\tvar g = H[6];\n\t\tvar h = H[7];\n\n\t\t// Computation\n\t\tfor (var i = 0; i < 64; i++) {\n\t\t\tif (i < 16) {\n\t\t\t\tW[i] = M[offset + i] | 0;\n\t\t\t} else {\n\t\t\t\tvar gamma0x = W[i - 15];\n\t\t\t\tvar gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t\t\t\t\t\t\t\t((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t\t\t\t\t\t\t\t(gamma0x >>> 3);\n\n\t\t\t\tvar gamma1x = W[i - 2];\n\t\t\t\tvar gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t\t\t\t\t\t\t\t((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t\t\t\t\t\t\t\t(gamma1x >>> 10);\n\n\t\t\t\tW[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t\t\t}\n\n\t\t\tvar ch  = (e & f) ^ (~e & g);\n\t\t\tvar maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t\t\tvar sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t\t\tvar sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t\t\tvar t1 = h + sigma1 + ch + K[i] + W[i];\n\t\t\tvar t2 = sigma0 + maj;\n\n\t\t\th = g;\n\t\t\tg = f;\n\t\t\tf = e;\n\t\t\te = (d + t1) | 0;\n\t\t\td = c;\n\t\t\tc = b;\n\t\t\tb = a;\n\t\t\ta = (t1 + t2) | 0;\n\t\t}\n\n\t\t// Intermediate hash value\n\t\tH[0] = (H[0] + a) | 0;\n\t\tH[1] = (H[1] + b) | 0;\n\t\tH[2] = (H[2] + c) | 0;\n\t\tH[3] = (H[3] + d) | 0;\n\t\tH[4] = (H[4] + e) | 0;\n\t\tH[5] = (H[5] + f) | 0;\n\t\tH[6] = (H[6] + g) | 0;\n\t\tH[7] = (H[7] + h) | 0;\n\t},\n\n\t_doFinalize: function () {\n\t\t// Shortcuts\n\t\tvar data = this._data;\n\t\tvar dataWords = data.words;\n\n\t\tvar nBitsTotal = this._nDataBytes * 8;\n\t\tvar nBitsLeft = data.sigBytes * 8;\n\n\t\t// Add padding\n\t\tdataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t\tdataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t\tdataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t\tdata.sigBytes = dataWords.length * 4;\n\n\t\t// Hash final blocks\n\t\tthis._process();\n\n\t\t// Return final computed hash\n\t\treturn this._hash;\n\t},\n\n\tclone: function () {\n\t\tvar clone = Hasher.clone.call(this);\n\t\tclone._hash = this._hash.clone();\n\n\t\treturn clone;\n\t}\n});\n\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA256('message');\n *     var hash = CryptoJS.SHA256(wordArray);\n */\nconst SHA256 = Hasher._createHelper(SHA256Hasher);\n\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA256(message, key);\n */\nconst HmacSHA256 = Hasher._createHmacHelper(SHA256Hasher);\n\nexport { SHA256, HmacSHA256 };\n","/* eslint-disable new-cap */\nimport { SHA256, HmacSHA256 } from \"./crypto-es/sha256.js\";\n\nconst hash = (str) =>\n    SHA256(str).toString();\n\nconst hmac = HmacSHA256;\n    \nexport { hmac, hash };\n","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n","import encode from \"strict-uri-encode\";\n\nconst sort = (a, b) => a.localeCompare(b);\n\n// Sort query parameters by key\n// Then also sort by value because AWS\nexport default ({ url }) => {\n    const source = {};\n    const params = [];\n    \n    url.searchParams.forEach((value, key) => {\n        if(!source[key]) {\n            source[key] = [];\n        }\n\n        source[key].push(value);\n    });\n\n    Object.keys(source)\n        .sort(sort)\n        .forEach((key) => {\n            source[key]\n                .sort(sort)\n                .forEach((value) => {\n                    params.push(`${encode(key)}=${encode(value)}`);\n                });\n        });\n\n    return params.join(\"&\");\n};\n","const trim = (val) => {\n    return val\n        .toString()\n        .trim()\n        .replace(/\\s+/g, \" \");\n};\n\nconst values = (headers) => {\n    if(!headers.length) {\n        return \"\";\n    }\n\n    return headers\n        .map(([ key, vals ]) => {\n            return `${key}:${Array.isArray(vals) ? vals.map(trim).join(\",\") : trim(vals)}`;\n        })\n        .join(\"\\n\");\n};\n\nconst signed = (headers) => {\n    return headers\n        .map(([ key ]) => key)\n        .join(\";\");\n};\n\nconst sorted = ({ headers = {} }) => {\n    const out = Object.keys(headers).map((key) => [ key.toLowerCase(), headers[key] ]);\n\n    return out.sort((a, b) => a[0] > b[0]);\n};\n\nexport { sorted, values, signed };\n","const multipleSlashesRegex = /\\/\\/+/g;\n\nexport default ({ url }) => url.pathname\n        .replace(multipleSlashesRegex, \"/\")\n        .split(\"/\")\n        .reduce((prev, curr) => {\n            if(curr === \"..\") {\n                prev.pop();\n\n                return prev;\n            }\n            \n            if(curr === \".\") {\n                return prev;\n            }\n            \n            prev.push(curr);\n\n            return prev;\n        }, [])\n        .join(\"/\");\n","import { hash } from \"../encode.js\";\n\nimport query from \"./query.js\";\nimport { values, signed } from \"./headers.js\";\nimport path from \"./path.js\";\n\nexport default (req) => {\n    const { method, body, sortedHeaders } = req;\n\n    return [\n        method ? method.toUpperCase() : \"GET\",\n        \n        // Canonical Path\n        path(req),\n        \n        // Canonical Query\n        query(req),\n        \n        // Canonical Headers\n        values(sortedHeaders),\n\n        // Extra linebreak\n        \"\",\n\n        // Signed Headers\n        signed(sortedHeaders),\n\n        // Hashed payload\n        hash(typeof body === \"string\" ? body.trim() : body),\n    ].join(\"\\n\");\n};\n","import request from \"./request/request.js\";\nimport { sorted, signed } from \"./request/headers.js\";\nimport stringToSign from \"./stringtosign.js\";\nimport signature from \"./signature.js\";\n\nconst dateCleanRegex = /[:\\-]|\\.\\d{3}/g;\n\nconst requestRequired = [\n    \"url\",\n];\n\nconst configRequired = [\n    \"accessKeyId\",\n    \"region\",\n    \"secretAccessKey\",\n    \"service\",\n];\n\n// Check for required params\nconst validate = (source, config) => {\n    if(!source) {\n        throw new Error(`Missing request object`);\n    }\n\n    if(!config) {\n        throw new Error(`Missing config object`);\n    }\n\n    let missing = requestRequired.filter((field) => !source[field]);\n\n    if(missing.length) {\n        throw new Error(`Missing required request fields: ${missing.join(\", \")}`);\n    }\n    \n    missing = configRequired.filter((field) => !config[field]);\n\n    if(missing.length) {\n        throw new Error(`Missing required config fields: ${missing.join(\", \")}`);\n    }\n};\n\nconst parseDate = ({ headers }) => {\n    const datetime = \"X-Amz-Date\" in headers ?\n        headers[\"X-Amz-Date\"] :\n        (new Date(headers.Date || Date.now()))\n            .toISOString()\n            .replace(dateCleanRegex, \"\");\n\n    return {\n        short : datetime.split(\"T\")[0],\n        long  : datetime,\n    };\n};\n\nconst authorization = (req, sig) => {\n    const { algorithm, accessKeyId, date, region, service, sortedHeaders } = req;\n\n    return [\n        `${algorithm} Credential=${accessKeyId}/${date.short}/${region}/${service}/aws4_request`,\n        `SignedHeaders=${signed(sortedHeaders)}`,\n        `Signature=${sig}`,\n    ].join(\", \");\n};\n\nexport default (source, config) => {\n    validate(source, config);\n\n    const details = Object.assign(\n        Object.create(null),\n        {\n            method : \"GET\",\n        },\n        source,\n        config,\n        {\n            url           : new URL(source.url),\n            algorithm     : \"AWS4-HMAC-SHA256\",\n            date          : parseDate(source),\n            sortedHeaders : sorted(source),\n        }\n    );\n    \n    const canonical = request(details);\n    const sts = stringToSign(details, canonical);\n    const sig = signature(details, sts);\n    const auth = authorization(details, sig);\n\n    if(!source.headers) {\n        source.headers = {};\n    }\n\n    source.headers[\"X-Amz-Date\"] = details.date.long;\n    \n    if(config.sessionToken) {\n        source.headers[\"X-Amz-Security-Token\"] = config.sessionToken;\n    }\n    \n    source.headers.Authorization = auth;\n\n    // Add partial output to response for tests so each step can be validated\n    if(ISTESTING) {\n        source.test = {\n            canonical,\n            sts,\n            auth,\n        };\n    }\n\n    return source;\n};\n","import { hash } from \"./encode.js\";\n\n// https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\nexport default ({ algorithm, date, region, service }, canonical) => [\n        // Signing Function\n        algorithm,\n        \n        // Date Time\n        date.long,\n        \n        // Scope\n        `${date.short}/${region}/${service}/aws4_request`,\n        \n        // Signed canonical request\n        hash(canonical),\n    ].join(\"\\n\");\n","import { hmac } from \"./encode.js\";\n\nexport default ({ date, secretAccessKey, region, service }, sts) => {\n    const kDate = hmac(date.short, `AWS4${secretAccessKey}`);\n    const kRegion = hmac(region, kDate);\n    const kService = hmac(service, kRegion);\n    const kSignature = hmac(\"aws4_request\", kService);\n\n    return hmac(sts, kSignature);\n};\n"],"names":["create","Object","F","obj","subtype","prototype","C","C_lib","lib","Base","extend","overrides","this","mixIn","hasOwnProperty","init","$super","apply","arguments","instance","properties","propertyName","toString","clone","WordArray","words","sigBytes","undefined","length","encoder","Hex","stringify","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","i","thatByte","Math","ceil","call","slice","random","nBytes","rcache","r","m_w","m_z","mask","result","_r","push","C_enc","enc","hexChars","bite","join","parse","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","e","Error","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","data","_process","doFlush","dataWords","dataSigBytes","blockSize","nBlocksReady","nWordsReady","max","_minBufferSize","nBytesReady","min","offset","_doProcessBlock","processedWords","splice","C_algo","Hasher","cfg","_doReset","update","messageUpdate","finalize","_doFinalize","_createHelper","hasher","message","_createHmacHelper","key","HMAC","algo","Crypto","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","H","K","isPrime","n","sqrtN","sqrt","factor","getFractionalBits","nPrime","pow","W","SHA256Hasher","SHA256","_hash","M","a","b","c","d","f","g","h","gamma0x","gamma0","gamma1x","gamma1","maj","sigma0","t1","nBitsTotal","nBitsLeft","floor","HmacSHA256","hash","str","hmac","replace","x","toUpperCase","sort","localeCompare","const","trim","val","values","headers","map","ref","Array","isArray","vals","signed","multipleSlashesRegex","req","source","params","method","pathname","split","reduce","prev","curr","pop","url","searchParams","forEach","value","keys","encode","sortedHeaders","body","dateCleanRegex","requestRequired","configRequired","config","let","missing","filter","field","validate","datetime","canonical","sts","kDate","kRegion","kService","kSignature","sig","details","assign","URL","algorithm","date","Date","now","toISOString","short","long","toLowerCase","request","region","service","secretAccessKey","auth","accessKeyId","sessionToken","Authorization"],"mappings":"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"}